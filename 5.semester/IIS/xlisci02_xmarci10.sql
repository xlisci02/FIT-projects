-- Veterinarna klinika
-- Liscinsky Matus (xlisci02)
-- Marcin Vladimir (xmarci10)
-- 27.3.2018

SET serveroutput ON;

/***************************************************
 * ZRUSENIE DOPOSIAL VYTVORENYCH OBJEKTOV DATABAZY
 ***************************************************/
DROP SEQUENCE animal_id_inc;

DROP TABLE PERSON CASCADE CONSTRAINTS;
DROP TABLE NURSE CASCADE CONSTRAINTS;
DROP TABLE VET CASCADE CONSTRAINTS;
DROP TABLE "OWNER" CASCADE CONSTRAINTS;
DROP TABLE ANIMAL CASCADE CONSTRAINTS;
DROP TABLE INTERVENTION CASCADE CONSTRAINTS;
DROP TABLE MEDICAMENT CASCADE CONSTRAINTS;
DROP TABLE MEDICAMENT_TYPE CASCADE CONSTRAINTS;
DROP TABLE TREATMENT CASCADE CONSTRAINTS;
DROP TABLE PRESCRIPTION CASCADE CONSTRAINTS;
DROP TABLE ANIMAL_SPECIES CASCADE CONSTRAINTS;
DROP TABLE SUITABLE CASCADE CONSTRAINTS;
DROP TABLE INCLUDES CASCADE CONSTRAINTS;

connect xlisci02/ZJ2iu9Eh;
DROP MATERIALIZED VIEW animal_intervention;
connect xmarci10/HF4q4oo6;

/*******************************************************
 * VYTVORENIE SEKVENCIE PRE PRIMARNY KLUC TABULKY ANIMAL
 *******************************************************/
CREATE SEQUENCE animal_id_inc START WITH 1 INCREMENT BY 1;

/**************************************************
 * VYTVORENIE TABULIEK A INTEGRITNYCH OBMEDZENI
 **************************************************/
CREATE TABLE PERSON(
    PERSON_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    "NAME" VARCHAR(32) NOT NULL,
    IDENTIFICATION_NUMBER NUMBER NOT NULL,
    BIRTHDATE DATE NOT NULL,
    ADDRESS VARCHAR(32) NOT NULL,
    SEX CHAR NOT NULL
);

CREATE TABLE NURSE(
    PERSON_ID INTEGER NOT NULL, -- PK a zaroven FK odkazujuci na PERSON_ID
    "DEGREE" VARCHAR (10),
    ACCOUNT_NUMBER VARCHAR (24) NOT NULL,
    HOURLY_WAGE NUMBER NOT NULL
);

CREATE TABLE VET(
    PERSON_ID INTEGER NOT NULL, -- PK a zaroven FK odkazujuci na PERSON_ID
    "DEGREE" VARCHAR (10) NOT NULL,
    ACCOUNT_NUMBER VARCHAR (24) NOT NULL,
    HOURLY_WAGE NUMBER NOT NULL
);

CREATE TABLE "OWNER"(
    PERSON_ID INTEGER NOT NULL, -- PK a zaroven FK odkazujuci na PERSON_ID
    MAIL VARCHAR (32) NOT NULL,
    PHONE_NUMBER VARCHAR (13) NOT NULL
);

CREATE TABLE ANIMAL(
    ANIMAL_ID INTEGER NOT NULL,
    ANIMAL_SPECIES_ID INTEGER NOT NULL, -- FK typ zvierata
    PERSON_ID INTEGER NOT NULL, -- FK vlastnik zvierata
    ANIM_NAME VARCHAR (32) NOT NULL,
    ANIM_BIRTHDATE DATE NOT NULL,
    LAST_EXAMINATION DATE NOT NULL,
    ANIM_SEX char NOT NULL
);

CREATE TABLE INTERVENTION(
    INTERVENTION_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    ANIMAL_ID INTEGER NOT NULL, -- FK zviera ktore podstupilo zakrok
    VET_ID INTEGER, -- FK ktory veterinar tento zakrok vykonal
    NURSE_ID INTEGER, -- FK ktora sestricka tento zakrok vykonala
    "TYPE" VARCHAR(32) NOT NULL,
    DOSAGE VARCHAR(32),
    "DATE" DATE NOT NULL,
    SIDE_EFFECTS VARCHAR(50),
  	PRICE NUMBER NOT NULL
);

CREATE TABLE INCLUDES(
    MEDICAMENT_ID INTEGER NOT NULL, --FK liek na recepte
    PRESCRIPTION_ID INTEGER NOT NULL, --FK recept obsahujuci liek
    DOSAGE VARCHAR(32) NOT NULL
);

CREATE TABLE MEDICAMENT(
    MEDICAMENT_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    MEDICAMENT_TYPE_ID INTEGER NOT NULL, --FK typ lieku
    "NAME" VARCHAR(32) NOT NULL,
    SIDE_EFFECTS VARCHAR(50),
    CONTRAINDICATION VARCHAR(50) NOT NULL,
    ACTIVE_SUBSTANCE VARCHAR(50) NOT NULL
);

CREATE TABLE MEDICAMENT_TYPE(
    MEDICAMENT_TYPE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    ATC_CLASIFICATION VARCHAR(32) NOT NULL,
    MODE_OF_ACTION VARCHAR(32) NOT NULL
);

CREATE TABLE PRESCRIPTION(
    PRESCRIPTION_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    TREATMENT_ID INTEGER NOT NULL, -- FK liecba ku ktorej patri recept 
    ADMINISTRATION_TIME VARCHAR(32) NOT NULL,
    "DATE" DATE NOT NULL
);

CREATE TABLE TREATMENT(
    TREATMENT_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    PERSON_ID INTEGER NOT NULL, -- FK liecba urcena veterinarom VET_ID
    ANIMAL_ID INTEGER NOT NULL, -- FK liecba ktory podstupilo zviera ANIMAL_ID
    DIAGNOSIS VARCHAR(32) NOT NULL,
    DATE_OF_START DATE NOT NULL,
    PRICE NUMBER NOT NULL
 );
 
CREATE TABLE SUITABLE (
    MEDICAMENT_ID INTEGER NOT NULL, --fK
    ANIMAL_SPECIES_ID INTEGER NOT NULL, --fk
    DOSE VARCHAR(32) NOT NULL,
    DISSEASE VARCHAR(128) NOT NULL
);

CREATE TABLE ANIMAL_SPECIES(
    ANIMAL_SPECIES_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
  	SPECIE VARCHAR(32) NOT NULL
);

ALTER TABLE OWNER ADD CONSTRAINT CH_PHONE_NUM CHECK ( LENGTH(PHONE_NUMBER) = 13);
ALTER TABLE PERSON ADD CONSTRAINT CHP_SEX CHECK ( SEX = 'M' OR SEX = 'F');

ALTER TABLE ANIMAL ADD CONSTRAINT CHA_SEX CHECK ( ANIM_SEX = 'M' OR ANIM_SEX = 'F');

ALTER TABLE VET ADD CONSTRAINT CH_VET_WAGE CHECK ( HOURLY_WAGE > 0);
ALTER TABLE NURSE ADD CONSTRAINT CH_NURSE_WAGE CHECK ( HOURLY_WAGE > 0);

/******************************
 * PRIDANIE PRIMARNYCH KLUCOV
 ******************************/
ALTER TABLE PERSON ADD CONSTRAINT PK_PERSON_ID PRIMARY KEY(PERSON_ID);
ALTER TABLE NURSE ADD CONSTRAINT PK_NURSE_ID PRIMARY KEY(PERSON_ID);
ALTER TABLE VET ADD CONSTRAINT PK_VET_ID PRIMARY KEY(PERSON_ID);
ALTER TABLE OWNER ADD CONSTRAINT PK_OWNER_ID PRIMARY KEY(PERSON_ID);
ALTER TABLE ANIMAL ADD CONSTRAINT PK_ANIMAL_ID PRIMARY KEY(ANIMAL_ID);
ALTER TABLE INTERVENTION ADD CONSTRAINT PK_INTERVENTION_ID PRIMARY KEY(INTERVENTION_ID);
ALTER TABLE MEDICAMENT ADD CONSTRAINT PK_MEDICAMENT_ID PRIMARY KEY(MEDICAMENT_ID);
ALTER TABLE MEDICAMENT_TYPE ADD CONSTRAINT PK_MEDICAMENT_TYPE_ID PRIMARY KEY(MEDICAMENT_TYPE_ID);
ALTER TABLE PRESCRIPTION ADD CONSTRAINT PK_PRESCRIPTION_ID PRIMARY KEY(PRESCRIPTION_ID);
ALTER TABLE TREATMENT ADD CONSTRAINT PK_TREATMENT_ID PRIMARY KEY(TREATMENT_ID);
ALTER TABLE ANIMAL_SPECIES ADD CONSTRAINT PK_ANIMAL_SPECIES_ID PRIMARY KEY(ANIMAL_SPECIES_ID);
ALTER TABLE SUITABLE ADD CONSTRAINT PK_SUITABLE_ID PRIMARY KEY(MEDICAMENT_ID, ANIMAL_SPECIES_ID);
ALTER TABLE INCLUDES ADD CONSTRAINT PK_INCLUDES_ID PRIMARY KEY(MEDICAMENT_ID, PRESCRIPTION_ID);

/****************************
 * PRIDANIE CUDZICH KLUCOV
 ****************************/
 
-- tieto tri entity su v generalizacnom vztahu s entitou person
ALTER TABLE NURSE ADD CONSTRAINT FK_NURSE_ID FOREIGN KEY (PERSON_ID) REFERENCES PERSON(PERSON_ID);
ALTER TABLE VET ADD CONSTRAINT FK_VET_ID FOREIGN KEY (PERSON_ID) REFERENCES PERSON(PERSON_ID);
ALTER TABLE OWNER ADD CONSTRAINT FK_PERSON_ID FOREIGN KEY (PERSON_ID) REFERENCES PERSON(PERSON_ID);

ALTER TABLE ANIMAL ADD CONSTRAINT FK_OWNER FOREIGN KEY (PERSON_ID) REFERENCES "OWNER"(PERSON_ID); 
ALTER TABLE ANIMAL ADD CONSTRAINT FK_TYPE FOREIGN KEY (ANIMAL_SPECIES_ID) REFERENCES ANIMAL_SPECIES(ANIMAL_SPECIES_ID); 
ALTER TABLE INTERVENTION ADD CONSTRAINT FK_ANIMAL FOREIGN KEY(ANIMAL_ID) REFERENCES ANIMAL(ANIMAL_ID);
ALTER TABLE INTERVENTION ADD CONSTRAINT FK_VET FOREIGN KEY(VET_ID) REFERENCES VET(PERSON_ID);     
ALTER TABLE INTERVENTION ADD CONSTRAINT FK_NURSE FOREIGN KEY(NURSE_ID) REFERENCES NURSE(PERSON_ID); 
ALTER TABLE TREATMENT ADD CONSTRAINT FK_DETERMINED_BY_VET FOREIGN KEY(PERSON_ID) REFERENCES VET(PERSON_ID); 
ALTER TABLE TREATMENT ADD CONSTRAINT FK_UNDERGONE_BY_ANIMAL FOREIGN KEY(ANIMAL_ID) REFERENCES ANIMAL(ANIMAL_ID); 
ALTER TABLE PRESCRIPTION ADD CONSTRAINT FK_TREATMENT FOREIGN KEY(TREATMENT_ID) REFERENCES TREATMENT(TREATMENT_ID); 

ALTER TABLE INCLUDES ADD CONSTRAINT FK_MEDICAMENT FOREIGN KEY(MEDICAMENT_ID) REFERENCES MEDICAMENT(MEDICAMENT_ID); 
ALTER TABLE INCLUDES ADD CONSTRAINT FK_PRESCRIPTION FOREIGN KEY(PRESCRIPTION_ID) REFERENCES PRESCRIPTION(PRESCRIPTION_ID);

ALTER TABLE MEDICAMENT ADD CONSTRAINT FK_MED_TYPE FOREIGN KEY(MEDICAMENT_TYPE_ID) REFERENCES MEDICAMENT_TYPE(MEDICAMENT_TYPE_ID); 
ALTER TABLE SUITABLE ADD CONSTRAINT FK_MEDIC FOREIGN KEY(MEDICAMENT_ID) REFERENCES MEDICAMENT(MEDICAMENT_ID); 
ALTER TABLE SUITABLE ADD CONSTRAINT FK_ANIMAL_SPECIES FOREIGN KEY(ANIMAL_SPECIES_ID) REFERENCES ANIMAL_SPECIES(ANIMAL_SPECIES_ID); 

/***************************************
 * VLOZENIE UKAZKOVYCH DAT DO TABULIEK
 ***************************************/
INSERT INTO PERSON ("NAME", IDENTIFICATION_NUMBER, BIRTHDATE, ADDRESS, SEX) VALUES ('Jakub Sopka', 9305036840, TO_DATE('1993-05-03', 'yyyy-mm-dd'), 'Pastovnicka 47 Plavec', 'M');
INSERT INTO PERSON ("NAME", IDENTIFICATION_NUMBER, BIRTHDATE, ADDRESS, SEX) VALUES ('Kristina Svarovska', 9061111532, TO_DATE('1990-11-11', 'yyyy-mm-dd'), 'Kounicova 114 Presov', 'F');
INSERT INTO PERSON ("NAME", IDENTIFICATION_NUMBER, BIRTHDATE, ADDRESS, SEX) VALUES ('Marian Bazinga', 8907013313, TO_DATE('1989-07-01', 'yyyy-mm-dd'), 'Jarkova 95 Bardejov', 'M');
INSERT INTO PERSON ("NAME", IDENTIFICATION_NUMBER, BIRTHDATE, ADDRESS, SEX) VALUES ('Svetlana Bielikova', 9155087733, TO_DATE('1991-05-08', 'yyyy-mm-dd'), 'Na rovni 231 Kosice', 'F');
INSERT INTO PERSON ("NAME", IDENTIFICATION_NUMBER, BIRTHDATE, ADDRESS, SEX) VALUES ('Rudolf Stramak', 8412164860, TO_DATE('1984-12-16', 'yyyy-mm-dd'), 'Zeleznicna 986 Poprad', 'M');
INSERT INTO PERSON ("NAME", IDENTIFICATION_NUMBER, BIRTHDATE, ADDRESS, SEX) VALUES ('Jaromir Varga', 8104086320, TO_DATE('1981-04-08', 'yyyy-mm-dd'), 'Kapacka 1178 Trebisov', 'M');
INSERT INTO PERSON ("NAME", IDENTIFICATION_NUMBER, BIRTHDATE, ADDRESS, SEX) VALUES ('Peter Velonos', 9261026588, TO_DATE('1992-11-02', 'yyyy-mm-dd'), 'Hlavna 114 Lubotice', 'M');
INSERT INTO PERSON ("NAME", IDENTIFICATION_NUMBER, BIRTHDATE, ADDRESS, SEX) VALUES ('Katka Sitniakova', 9708118442, TO_DATE('1997-08-11', 'yyyy-mm-dd'), 'Somalska 763 Michalovce', 'F');

INSERT INTO VET( PERSON_ID, "DEGREE", ACCOUNT_NUMBER, HOURLY_WAGE) VALUES (1, 'MVDr.', 'CZ6508000000192000145399' , 12.5);
INSERT INTO VET( PERSON_ID, "DEGREE", ACCOUNT_NUMBER, HOURLY_WAGE) VALUES (6, 'MVDr.', 'SK3112000000198742637541', 15);

INSERT INTO NURSE( PERSON_ID, "DEGREE", ACCOUNT_NUMBER, HOURLY_WAGE) VALUES (2, 'Mgr.', 'SK1009000000005047516461', 7);
INSERT INTO NURSE( PERSON_ID, "DEGREE", ACCOUNT_NUMBER, HOURLY_WAGE) VALUES (4, 'Mgr.', 'SK2409000000005068474029', 7.5);

INSERT INTO "OWNER" (PERSON_ID, MAIL, PHONE_NUMBER) VALUES (3, 'bazinga@gmail.com', '+420902915778');
INSERT INTO "OWNER" (PERSON_ID, MAIL, PHONE_NUMBER) VALUES (5, 'stramak123@zoznam.sk', '+421910412786');
INSERT INTO "OWNER" (PERSON_ID, MAIL, PHONE_NUMBER) VALUES (7, 'vel123peter@centrum.cz', '+420941524896');
INSERT INTO "OWNER" (PERSON_ID, MAIL, PHONE_NUMBER) VALUES (8, 'katusa777@gmail.com', '+421911236541');
INSERT INTO "OWNER" (PERSON_ID, MAIL, PHONE_NUMBER) VALUES (1, 'sopka447mvdr@gmail.com', '+421421756541');

INSERT INTO ANIMAL_SPECIES (SPECIE) VALUES ('Pes');
INSERT INTO ANIMAL_SPECIES (SPECIE) VALUES ('Macka');
INSERT INTO ANIMAL_SPECIES (SPECIE) VALUES ('Zajac');
INSERT INTO ANIMAL_SPECIES (SPECIE) VALUES ('Krava'); 

INSERT INTO ANIMAL (ANIMAL_ID, ANIMAL_SPECIES_ID, PERSON_ID, ANIM_NAME, ANIM_BIRTHDATE, LAST_EXAMINATION, ANIM_SEX) VALUES (animal_id_inc.nextval, 1,3,'Jina', TO_DATE('2015-05-11','yyyy-mm-dd'), TO_DATE('2018-01-11','yyyy-mm-dd'), 'F');
INSERT INTO ANIMAL (ANIMAL_ID, ANIMAL_SPECIES_ID, PERSON_ID, ANIM_NAME, ANIM_BIRTHDATE, LAST_EXAMINATION, ANIM_SEX) VALUES (animal_id_inc.nextval, 1,5,'Rex', TO_DATE('2016-04-02','yyyy-mm-dd'), TO_DATE('2018-02-02','yyyy-mm-dd'), 'M');
INSERT INTO ANIMAL (ANIMAL_ID, ANIMAL_SPECIES_ID, PERSON_ID, ANIM_NAME, ANIM_BIRTHDATE, LAST_EXAMINATION, ANIM_SEX) VALUES (animal_id_inc.nextval, 2,3,'Fluffy', TO_DATE('2014-07-26','yyyy-mm-dd'), TO_DATE('2017-05-01','yyyy-mm-dd'), 'M');
INSERT INTO ANIMAL (ANIMAL_ID, ANIMAL_SPECIES_ID, PERSON_ID, ANIM_NAME, ANIM_BIRTHDATE, LAST_EXAMINATION, ANIM_SEX) VALUES (animal_id_inc.nextval, 2,7,'Mandu', TO_DATE('2016-06-14', 'yyyy-mm-dd'), TO_DATE('2018-03-25','yyyy-mm-dd'), 'F');
INSERT INTO ANIMAL (ANIMAL_ID, ANIMAL_SPECIES_ID, PERSON_ID, ANIM_NAME, ANIM_BIRTHDATE, LAST_EXAMINATION, ANIM_SEX) VALUES (animal_id_inc.nextval, 3,8,'Rick', TO_DATE('2017-02-12', 'yyyy-mm-dd'), TO_DATE('2018-04-02','yyyy-mm-dd'), 'M');
INSERT INTO ANIMAL (ANIMAL_ID, ANIMAL_SPECIES_ID, PERSON_ID, ANIM_NAME, ANIM_BIRTHDATE, LAST_EXAMINATION, ANIM_SEX) VALUES (animal_id_inc.nextval, 3,1,'Bobek', TO_DATE('2017-08-13', 'yyyy-mm-dd'), TO_DATE('2017-09-22','yyyy-mm-dd'), 'M');

INSERT INTO TREATMENT( PERSON_ID , ANIMAL_ID, DIAGNOSIS, DATE_OF_START, PRICE) VALUES (1, 2, 'Bolest klbov', TO_DATE('2018-01-28', 'yyyy-mm-dd'), 17.45 );
INSERT INTO TREATMENT( PERSON_ID, ANIMAL_ID, DIAGNOSIS, DATE_OF_START, PRICE) VALUES (6, 4, 'Zapal ucha', TO_DATE('2017-02-11', 'yyyy-mm-dd'), 25 );
INSERT INTO TREATMENT( PERSON_ID, ANIMAL_ID, DIAGNOSIS, DATE_OF_START, PRICE) VALUES (6, 3, 'Hnacka', TO_DATE('2018-03-17', 'yyyy-mm-dd'), 9.50);
INSERT INTO TREATMENT( PERSON_ID, ANIMAL_ID, DIAGNOSIS, DATE_OF_START, PRICE) VALUES (1, 5, 'Blchy', TO_DATE('2018-03-05', 'yyyy-mm-dd'), 74.50);
INSERT INTO TREATMENT( PERSON_ID, ANIMAL_ID, DIAGNOSIS, DATE_OF_START, PRICE) VALUES (1, 6, 'Blchy', TO_DATE('2018-09-15', 'yyyy-mm-dd'), 74.90);
INSERT INTO TREATMENT( PERSON_ID, ANIMAL_ID, DIAGNOSIS, DATE_OF_START, PRICE) VALUES (1, 6, 'Hnacka', TO_DATE('2018-07-15', 'yyyy-mm-dd'), 9.90);

INSERT INTO INTERVENTION(ANIMAL_ID, VET_ID, "TYPE", "DATE", PRICE) VALUES (1, 6, 'EKG', TO_DATE('2018-02-19', 'yyyy-mm-dd'), 5.50);
INSERT INTO INTERVENTION(ANIMAL_ID, NURSE_ID, "TYPE", DOSAGE, "DATE", SIDE_EFFECTS, PRICE) VALUES (3, 4, 'Odber krvi a spracovanie vzorky', '50ml', TO_DATE('2018-01-23', 'yyyy-mm-dd'),'Nevolnost', 2.60);
INSERT INTO INTERVENTION(ANIMAL_ID, VET_ID, "TYPE", "DATE", PRICE) VALUES (2, 6, 'EKG', TO_DATE('2018-01-23', 'yyyy-mm-dd'), 6.50);
INSERT INTO INTERVENTION(ANIMAL_ID, NURSE_ID, "TYPE", DOSAGE, "DATE", PRICE) VALUES (4, 2, 'Anestezia inhalacna', '25ml', TO_DATE('2018-01-23', 'yyyy-mm-dd'),15.90);
INSERT INTO INTERVENTION(ANIMAL_ID, NURSE_ID, "TYPE", DOSAGE, "DATE", SIDE_EFFECTS, PRICE) VALUES (4, 4, 'Odber krvi a spracovanie vzorky', '25ml', TO_DATE('2017-08-02', 'yyyy-mm-dd'),'Nevolnost', 2.60);
INSERT INTO INTERVENTION(ANIMAL_ID, VET_ID, NURSE_ID, "TYPE", "DATE", PRICE) VALUES (4, 1, 4, 'Punkcia mocoveho mechura', TO_DATE('2017-08-02', 'yyyy-mm-dd'),60.20);

INSERT INTO PRESCRIPTION( TREATMENT_ID, ADMINISTRATION_TIME, "DATE") VALUES (1,'2 tyzdne', TO_DATE('2018-01-28', 'yyyy-mm-dd'));
INSERT INTO PRESCRIPTION( TREATMENT_ID, ADMINISTRATION_TIME, "DATE") VALUES (2,'1 tyzden', TO_DATE('2017-02-11', 'yyyy-mm-dd'));
INSERT INTO PRESCRIPTION( TREATMENT_ID, ADMINISTRATION_TIME, "DATE") VALUES (3,'1 tyzden', TO_DATE('2018-03-17', 'yyyy-mm-dd'));
INSERT INTO PRESCRIPTION( TREATMENT_ID, ADMINISTRATION_TIME, "DATE") VALUES (4,'1 den', TO_DATE('2016-03-05', 'yyyy-mm-dd'));

INSERT INTO MEDICAMENT_TYPE( ATC_CLASIFICATION, MODE_OF_ACTION ) VALUES ('Analgetikum', 'Zmiernenie bolesti');
INSERT INTO MEDICAMENT_TYPE( ATC_CLASIFICATION, MODE_OF_ACTION ) VALUES ('Antibiotikum', 'Liecba infekcnych chorob');
INSERT INTO MEDICAMENT_TYPE( ATC_CLASIFICATION, MODE_OF_ACTION ) VALUES ('Antiparazitikum', 'Proti parazitom');

INSERT INTO MEDICAMENT( MEDICAMENT_TYPE_ID, "NAME", CONTRAINDICATION, ACTIVE_SUBSTANCE, SIDE_EFFECTS ) VALUES (1, 'Rycarfa Flavour', 'Nepouzivat u gravidnych a laktujucich suk', 'Carprofenum', 'Zvracanie, maksie vykaly, strata apetitu');
INSERT INTO MEDICAMENT( MEDICAMENT_TYPE_ID, "NAME", CONTRAINDICATION, ACTIVE_SUBSTANCE, SIDE_EFFECTS ) VALUES (2, 'Quiflox', 'Nepouzivat u psov mladsich ako 12 mesiacov', 'Marbofloxacinum', 'Bolest a vznik zapalovych lezii');
INSERT INTO MEDICAMENT( MEDICAMENT_TYPE_ID, "NAME", CONTRAINDICATION, ACTIVE_SUBSTANCE, SIDE_EFFECTS ) VALUES (2, 'Enroxil Flavour', 'Nepouzivat na profilaxiu', 'Enrofloxacin', 'Vracanie a anorexia');
INSERT INTO MEDICAMENT( MEDICAMENT_TYPE_ID, "NAME", CONTRAINDICATION, ACTIVE_SUBSTANCE, SIDE_EFFECTS ) VALUES (1, 'Ataxxa', 'Neaplikovat mladatam mladsim ako 7 tyzdnov', 'Permathrinum', 'Nepokoj, triazka, edem, erozie, alopecia');

INSERT INTO SUITABLE( MEDICAMENT_ID, ANIMAL_SPECIES_ID, DOSE, DISSEASE) VALUES (1,1,'2-4mg/kg','zmiernenie zapalu a bolesti pri ochoreniach klbov');
INSERT INTO SUITABLE( MEDICAMENT_ID, ANIMAL_SPECIES_ID, DOSE, DISSEASE) VALUES (2,1,'2mg/kg','liecba infikovanych ran, infekcia dolnych mocovych ciest');
INSERT INTO SUITABLE( MEDICAMENT_ID, ANIMAL_SPECIES_ID, DOSE, DISSEASE) VALUES (2,4,'2mg/kg','liecba respiracnych infekcii');
INSERT INTO SUITABLE( MEDICAMENT_ID, ANIMAL_SPECIES_ID, DOSE, DISSEASE) VALUES (3,1,'5mg/kg','liecba bakterialnych infekcii traviaceho, dychacieho a urogenitalneho traktu, zapal zvukovodov, koze');
INSERT INTO SUITABLE( MEDICAMENT_ID, ANIMAL_SPECIES_ID, DOSE, DISSEASE) VALUES (3,2,'5mg/kg','liecba bakterialnych infekcii traviaceho, dychacieho a urogenitalneho traktu, zapal zvukovodov, koze');
INSERT INTO SUITABLE( MEDICAMENT_ID, ANIMAL_SPECIES_ID, DOSE, DISSEASE) VALUES (4,3,'10mg/kg','liecba napadnutia blchami');

INSERT INTO INCLUDES( MEDICAMENT_ID, PRESCRIPTION_ID, DOSAGE ) VALUES( 1,1,'1davka/8hod' );
INSERT INTO INCLUDES( MEDICAMENT_ID, PRESCRIPTION_ID, DOSAGE ) VALUES( 3,2,'1davka/12hod' );
INSERT INTO INCLUDES( MEDICAMENT_ID, PRESCRIPTION_ID, DOSAGE ) VALUES( 3,3,'1davka/8hod');
INSERT INTO INCLUDES( MEDICAMENT_ID, PRESCRIPTION_ID, DOSAGE ) VALUES( 4,4,'1davka' );

/***********
 * SELECTY
 ***********/
 
-- spojenie 2 tabuliek
-- Vypise mena vsetkych zvierat vlastnika s ID=3
SELECT ANIM_NAME
FROM "OWNER" O INNER JOIN ANIMAL AN ON O.PERSON_ID=AN.PERSON_ID
WHERE O.PERSON_ID=3;

-- spojenie 2 tabuliek
-- Vypise ID predpisov spolu s diagnozou, ktore patria k liecbam so zaciatkom v roku 2018
SELECT PRESCRIPTION_ID, DIAGNOSIS
FROM PRESCRIPTION NATURAL JOIN TREATMENT
WHERE DATE_OF_START BETWEEN TO_DATE('2018-01-01', 'yyyy-mm-dd') AND TO_DATE('2018-12-31', 'yyyy-mm-dd');

-- spojenie 2 tabuliek
-- Vypise vedlajsie efekty k typu lieku
SELECT ATC_CLASIFICATION, SIDE_EFFECTS
FROM MEDICAMENT NATURAL JOIN MEDICAMENT_TYPE
ORDER BY ATC_CLASIFICATION;

-- spojenie 3 tabuliek
-- Vypise meno a adresu majitela zvierata s menom 'Rex'
SELECT "NAME" OWNER_NAME, ADDRESS
FROM PERSON NATURAL JOIN "OWNER" NATURAL JOIN ANIMAL
WHERE ANIM_NAME='Rex';

-- dotaz s GROUP BY 
-- Vypise mena veterinarov a prijem pri liecbach ktore urcili
SELECT "NAME" AS VET_NAME, SUM(PRICE) PROFIT
FROM PERSON NATURAL JOIN VET NATURAL JOIN TREATMENT
GROUP BY "NAME";

-- dotaz s GROUP BY
-- Vypise meno zvierata ktore podstupilo najviac zakrokov
SELECT ANIM_NAME, COUNT(*) INTERVENTIONS_COUNT
FROM ANIMAL NATURAL JOIN INTERVENTION
GROUP BY ANIM_NAME
HAVING COUNT(*) >= ALL(
    SELECT COUNT(*)
    FROM ANIMAL NATURAL JOIN INTERVENTION
    GROUP BY ANIM_NAME);

-- dotaz s EXISTS
-- Vypise informacie o zakrokoch ktore vykonala sestra sama (bez veterinara)
SELECT I.*
FROM NURSE N , INTERVENTION I 
WHERE N.PERSON_ID=I.NURSE_ID AND 
    NOT EXISTS( 
        SELECT V.PERSON_ID ,V.DEGREE ,V.ACCOUNT_NUMBER ,V.HOURLY_WAGE  
        FROM VET V 
        WHERE I.VET_ID=V.PERSON_ID);

-- dotaz s EXISTS
-- Vypise informacie o zakrokoch ktore vykonal veterinar sam (bez sestry)
SELECT I.*
FROM VET V , INTERVENTION I 
WHERE V.PERSON_ID=I.VET_ID AND 
    NOT EXISTS( 
        SELECT N.PERSON_ID ,N.DEGREE ,N.ACCOUNT_NUMBER ,N.HOURLY_WAGE   
        FROM NURSE N
        WHERE I.NURSE_ID=N.PERSON_ID);

-- dotaz s IN
-- Vypise veterinarov ktory su zaroven vlastnikom zvierata
SELECT "NAME" VET_NAME
FROM VET NATURAL JOIN PERSON
WHERE PERSON_ID IN( 
    SELECT PERSON_ID
    FROM PERSON NATURAL JOIN "OWNER");

-- dotaz s IN
-- Vypise druhy zvierat, ktorym bola urcena liecba
SELECT DISTINCT SPECIE
FROM ANIMAL NATURAL JOIN ANIMAL_SPECIES
WHERE ANIMAL_ID IN( 
    SELECT AN.ANIMAL_ID
    FROM TREATMENT T INNER JOIN ANIMAL AN ON T.ANIMAL_ID = AN.ANIMAL_ID);


/*************************
 * VYTVORENIE TRIGGEROV
 *************************/
 
--- Trigger na kontrolu rodneho cisla osoby
CREATE OR REPLACE TRIGGER check_identification_number
	BEFORE INSERT OR UPDATE OF identification_number ON PERSON
  FOR EACH ROW
DECLARE
  identification_number PERSON.identification_number%TYPE;
  sex PERSON.sex%TYPE;
  rc_day NUMBER;
  rc_month NUMBER;
  rc_year NUMBER;
BEGIN
   identification_number := :NEW.identification_number;

   if (LENGTH(identification_number) < 9 OR LENGTH(identification_number) > 10)
      THEN raise_application_error(-20001, 'ERROR: Nevalidna dlzka rodneho cisla!');
   END IF;

   if (MOD(identification_number, 11) != 0)
       THEN raise_application_error(-20002, 'ERROR: Nevalidne rodne cislo (musi byt delitelne 11)!');
   END IF;

   rc_day := TO_NUMBER(SUBSTR(identification_number, 5, 2), '00');
   rc_month := TO_NUMBER(SUBSTR(identification_number, 3, 2), '00');
   rc_year := TO_NUMBER(SUBSTR(identification_number, 1, 2), '00');
    dbms_output.put_line('day: '||rc_day||'');


   if (rc_year < 0)
       THEN raise_application_error(-20003, 'ERROR: Nevalidny datum v rodnom cisle!');
   END IF;

    if (sex = 'F')
       THEN rc_month := rc_month - 50; 
  	END IF;
    
    if (rc_month > 20)
    	THEN rc_month := rc_month - 20;
    END IF;

   if (rc_month <= 0 OR rc_month > 12)
       THEN raise_application_error(-20003, 'ERROR: Nevalidny datum v rodnom cisle!');
   END IF;

   if (rc_day <= 0 OR rc_day > 31)
       THEN raise_application_error(-20003, 'ERROR: Nevalidny datum v rodnom cisle!');
   END IF;

   if (rc_month = 2 AND MOD(rc_year, 4) = 0 AND (rc_day > 29))
      THEN raise_application_error(-20003, 'ERROR: Nevalidny datum v rodnom cisle!');
   END IF;

   if (rc_month = 2 AND MOD(rc_year, 4) != 0 AND (rc_day > 28))
      THEN raise_application_error(-20003, 'ERROR: Nevalidny datum v rodnom cisle!');
   END IF;

   if ((rc_month = 4 OR rc_month = 6 OR rc_month = 9 OR rc_month = 11) AND rc_day > 30)
       THEN raise_application_error(-20003, 'ERROR: Nevalidny datum v rodnom cisle!');
   END IF;
END;
/
-- Test kontroly rodneho cisla - nasledujuce vlozenie vyhodi error
-- INSERT INTO PERSON ("NAME", IDENTIFICATION_NUMBER, BIRTHDATE, ADDRESS, SEX) VALUES ('Jakub Kusalik', 9706026463, TO_DATE('1986-12-25', 'yyyy-mm-dd'), 'Pastovnicka 46 Plavec', 'M');


-- Trigger na autoinkrementaciu animal_id
CREATE OR REPLACE TRIGGER animal_trigger
BEFORE INSERT ON ANIMAL
FOR EACH ROW
   BEGIN
       SELECT animal_id_inc.nextval INTO :NEW.animal_id FROM dual;
   END;
/
-- Test autoinkrementacie hodnota animal_id nebola zadana => bude dosadene nasledujuce cislo zo sekvencie
-- INSERT INTO ANIMAL (ANIMAL_SPECIES_ID, PERSON_ID, ANIM_NAME, ANIM_BIRTHDATE, LAST_EXAMINATION, ANIM_SEX) VALUES (1,3,'Jonna', TO_DATE('2015-05-11','yyyy-mm-dd'), TO_DATE('2018-01-11','yyyy-mm-dd'), 'F');
-- select * from animal;

-- Trigger na kontrolu IBANU
CREATE OR REPLACE TRIGGER check_iban
    BEFORE INSERT OR UPDATE OF ACCOUNT_NUMBER ON VET
    FOR EACH ROW
DECLARE
    account_number VET.ACCOUNT_NUMBER%TYPE;
    country VARCHAR(2);
    rest VARCHAR(22);
    numbers NUMBER;
    account_id VARCHAR(10);
    check_sum NUMBER;
BEGIN
    account_number := :NEW.ACCOUNT_NUMBER;
    rest := SUBSTR(account_number, 3, 22);
    if(LENGTH(rest) != 22) THEN
        raise_application_error(-20005, 'ERROR: IBAN musi obsahovat 22 cislic!');
    END IF;
    numbers := TO_NUMBER(rest);
    country := SUBSTR(account_number, 1, 2);
    account_id := SUBSTR(account_number, 15, 10);
    check_sum := TO_NUMBER(SUBSTR(account_id, 1, 1), '9') *  6 + TO_NUMBER(SUBSTR(account_id, 2, 1), '9') *  3 + TO_NUMBER(SUBSTR(account_id, 3, 1), '9') *  7 + TO_NUMBER(SUBSTR(account_id, 4, 1), '9') *  9 + TO_NUMBER(SUBSTR(account_id, 5, 1), '9') *  10 + TO_NUMBER(SUBSTR(account_id, 6, 1), '9') *  5 + TO_NUMBER(SUBSTR(account_id, 7, 1), '9') *  8 + TO_NUMBER(SUBSTR(account_id, 8, 1), '9') *  4 + TO_NUMBER(SUBSTR(account_id, 9, 1), '9') *  2 + TO_NUMBER(SUBSTR(account_id, 10, 1), '9') *  1;
    if(MOD(check_sum, 11) != 0) THEN
        raise_application_error(-20007, 'ERROR: Nespravny format cisla uctu!');
    END IF;
    if(country != 'CZ' and country != 'SK') THEN
        raise_application_error(-20008, 'ERROR: Zadajte SK alebo CZ cislo uctu!');
    END IF;
    EXCEPTION
        WHEN VALUE_ERROR THEN 
            raise_application_error(-20005, 'ERROR: IBAN musi obsahovat 22 cislic!');  
END;
/
-- Test kontroly spravnosti cisla uctu (nasledujuce cislo uctu vyhodi error kvoli nedelitelnosti 11)
-- INSERT INTO VET( PERSON_ID, "DEGREE", ACCOUNT_NUMBER, HOURLY_WAGE) VALUES (7, 'MVDr.', 'SK1009000000005047616461' , 12.5);


/*************************
 * VYTVORENIE PROCEDUR
 *************************/
CREATE OR REPLACE PROCEDURE indisposition_of_animal_species (id_specie NUMBER) AS
   CURSOR curs_treat IS SELECT AN.ANIMAL_SPECIES_ID, T.DIAGNOSIS FROM ANIMAL AN INNER JOIN TREATMENT T ON AN.ANIMAL_ID = T.ANIMAL_ID GROUP BY AN.ANIMAL_SPECIES_ID, T.DIAGNOSIS;
   CURSOR curs_diag IS SELECT T.DIAGNOSIS FROM TREATMENT T GROUP BY T.DIAGNOSIS;
   row_treat curs_treat%ROWTYPE;
   row_diag curs_diag%ROWTYPE;
   specie_treat NUMBER;
   all_treats NUMBER;
   BEGIN
     specie_treat := 0;
     all_treats := 0;
     open curs_treat;
     loop
       fetch curs_treat INTO row_treat;
       exit when curs_treat%NOTFOUND;
       if row_treat.ANIMAL_SPECIES_ID = id_specie THEN
         specie_treat := specie_treat + 1;
       END IF;
     end loop;
     close curs_treat;
     open curs_diag;
     loop
        fetch curs_diag INTO row_diag;
        exit when curs_diag%NOTFOUND;
        all_treats := all_treats + 1;
     end loop;
     close curs_diag;
     dbms_output.put_line ('Tento druh uz trpel '||ROUND(specie_treat/all_treats*100,2)||'% vsetkych doposial evidovanych chorob');
   EXCEPTION
    WHEN ZERO_DIVIDE THEN
      dbms_output.put_line('Ziadne liecby v databaze');
    WHEN OTHERS THEN
      Raise_Application_Error (-20000, 'Chyba pri prehladavani databazy');
   END;
/
-- test procedury viz dokumentacia
exec indisposition_of_animal_species(2);

CREATE OR REPLACE PROCEDURE owner_costs (id_owner NUMBER) AS
  CURSOR curs_treat IS SELECT an.person_id, t.price from treatment t inner join animal an on t.animal_id = an.animal_id;
  row_treat curs_treat%ROWTYPE;
  money NUMBER;
  BEGIN
    money := 0;
    open curs_treat;
    loop
      fetch curs_treat into row_treat;
      exit when curs_treat%NOTFOUND;
      if row_treat.PERSON_ID = id_owner THEN
        money := money + row_treat.PRICE;
      END IF;
    end loop;
    dbms_output.put_line ('Majitel uz minul '||money||' eur na liecby svojich zvierat.');
    close curs_treat;
  END;
/
-- test procedury viz dokumentacia
exec owner_costs(1);

CREATE OR REPLACE PROCEDURE avarage_price_of_intervention (id_zam INTEGER) AS
	CURSOR curs_interv IS SELECT * FROM INTERVENTION;
	row_interv curs_interv%ROWTYPE;
  money NUMBER;
  counter NUMBER;
  BEGIN
  	money := 0;
    counter := 0;
    open curs_interv;
    loop
      fetch curs_interv INTO row_interv;
      exit when curs_interv%NOTFOUND;
      if row_interv.NURSE_ID = id_zam OR row_interv.VET_ID = id_zam THEN
         money := money + row_interv.PRICE;
         counter := counter + 1;
       END IF;
    end loop;
    dbms_output.put_line ('Zamestnanec s id '||id_zam||' priemerne zinkasoval '||ROUND(money/counter,2)||' eur za zakroky na ktorych sa podielal.');
    close curs_interv;
   	EXCEPTION
      WHEN ZERO_DIVIDE THEN
        dbms_output.put_line('Ziadne zakroky zamestnanca v databaze.');
      WHEN OTHERS THEN
        Raise_Application_Error (-20000, 'Chyba pri prehladavani databazy.');
   END;
/
-- test procedury viz dokumentacia
exec avarage_price_of_intervention(4);

/************************************************************************
 * PRIDELENIE PRAV DRUHEMU POUZIVATELOVI (druhy pouzivatel pohlad NURSE)
 ************************************************************************/
GRANT ALL ON PERSON TO xlisci02;
GRANT ALL ON OWNER TO xlisci02;
GRANT ALL ON ANIMAL TO xlisci02;
GRANT ALL ON INTERVENTION TO xlisci02;
GRANT ALL ON INCLUDES TO xlisci02;
GRANT SELECT ON MEDICAMENT TO xlisci02;
GRANT ALL ON PRESCRIPTION TO xlisci02;
GRANT SELECT ON TREATMENT TO xlisci02;
GRANT ALL ON ANIMAL_SPECIES TO xlisci02;

GRANT EXECUTE ON indisposition_of_animal_species TO xlisci02;
GRANT EXECUTE ON owner_costs TO xlisci02;


/*************************
 * EXPLAIN PLAN & INDEX
 *************************/
EXPLAIN PLAN FOR
SELECT "NAME", count(*) 
    FROM ANIMAL natural join "OWNER" NATURAL JOIN PERSON 
    group by "NAME";

SELECT * FROM TABLE(DBMS_XPLAN.display);

CREATE INDEX indexExplain ON ANIMAL(PERSON_ID);

EXPLAIN PLAN FOR
SELECT "NAME", count(*) 
    FROM ANIMAL natural join "OWNER" NATURAL JOIN PERSON 
    group by "NAME";
SELECT * FROM TABLE(DBMS_XPLAN.display);
 
DROP INDEX indexExplain;

/***************************************
 * VYTVORENIE MATERIALIZOVANEHO POHLADU
 ***************************************/
DROP MATERIALIZED VIEW LOG ON animal;
DROP MATERIALIZED VIEW LOG ON intervention;

CREATE MATERIALIZED VIEW LOG ON animal WITH PRIMARY KEY, ROWID;
CREATE MATERIALIZED VIEW LOG ON intervention WITH PRIMARY KEY, ROWID;

GRANT ALL ON MLOG$_animal to xlisci02;
GRANT ALL ON MLOG$_intervention to xlisci02;

connect xlisci02/ZJ2iu9Eh; 

CREATE MATERIALIZED VIEW  animal_intervention
CACHE
BUILD IMMEDIATE
REFRESH FAST ON COMMIT
ENABLE QUERY REWRITE
AS SELECT AN.ANIM_NAME, T."TYPE", T."DATE", an.ROWID animal_row_id, t.ROWID intervention_row_id FROM xmarci10.ANIMAL AN INNER JOIN xmarci10.intervention T ON AN.ANIMAL_ID=T.ANIMAL_ID WHERE AN.ANIMAL_ID=4;

GRANT ALL ON animal_intervention to xmarci10;

EXPLAIN PLAN FOR SELECT * FROM xmarci10.ANIMAL AN INNER JOIN xmarci10.intervention T ON AN.ANIMAL_ID=T.ANIMAL_ID WHERE AN.ANIMAL_ID=4;
SELECT plan_table_output FROM TABLE(dbms_xplan.display(NULL, NULL,'basic'));

ALTER SESSION SET query_rewrite_enabled = TRUE;
EXPLAIN PLAN FOR SELECT AN.ANIM_NAME, T."TYPE", T."DATE", an.ROWID animal_row_id, t.ROWID intervention_row_id FROM xmarci10.ANIMAL AN INNER JOIN xmarci10.intervention T ON AN.ANIMAL_ID=T.ANIMAL_ID WHERE AN.ANIMAL_ID=4;
SELECT plan_table_output FROM TABLE(dbms_xplan.display(NULL, NULL,'basic'));


/*******************************************
 * UKAZKA FUNKCIE MATERIALIZOVANEHO POHLADU
 *******************************************/
select * from animal_intervention;
select * from xmarci10.intervention;
INSERT INTO xmarci10.INTERVENTION(ANIMAL_ID, VET_ID, "TYPE", "DATE", PRICE) VALUES (4, 6, 'EKG', TO_DATE('2018-02-21', 'yyyy-mm-dd'), 5.50);
commit;
select * from animal_intervention;
select * from xmarci10.intervention;
